// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: cue.flex

package dev.monogon.cue.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import it.unimi.dsi.fastutil.ints.IntArrayList;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.monogon.cue.lang.CueTypes.*;
import static dev.monogon.cue.lang.CueTokenTypes.*;


public class _CueLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_LITERAL = 2;
  public static final int STRING_MULTILINE = 4;
  public static final int BYTE_LITERAL = 6;
  public static final int BYTES_MULTILINE = 8;
  public static final int INTERPOLATION = 10;
  public static final int PARENTHESIS = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\0\1\1\22\0\1\1\1\3"+
    "\1\4\1\5\1\6\1\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\14\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\25\1\27\1\30"+
    "\1\31\1\0\1\32\1\33\1\32\1\34\1\35\4\36"+
    "\1\37\1\36\1\40\3\6\1\40\1\6\1\40\2\6"+
    "\1\40\3\6\1\40\1\41\2\6\1\42\2\6\1\43"+
    "\1\44\1\45\1\0\1\46\1\0\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\6\1\56\1\6\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\6\1\73\1\74\1\6\1\75"+
    "\1\76\1\77\1\100\53\0\1\6\12\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0"+
    "\14\6\16\0\5\6\7\0\1\6\1\0\1\6\201\0"+
    "\5\6\1\0\2\6\2\0\4\6\1\0\1\6\6\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0"+
    "\123\6\1\0\213\6\10\0\246\6\1\0\46\6\2\0"+
    "\1\6\6\0\51\6\107\0\33\6\4\0\4\6\55\0"+
    "\53\6\25\0\12\101\4\0\2\6\1\0\143\6\1\0"+
    "\1\6\17\0\2\6\7\0\2\6\12\101\3\6\2\0"+
    "\1\6\20\0\1\6\1\0\36\6\35\0\131\6\13\0"+
    "\1\6\16\0\12\101\41\6\11\0\2\6\4\0\1\6"+
    "\5\0\26\6\4\0\1\6\11\0\1\6\3\0\1\6"+
    "\27\0\31\6\7\0\13\6\65\0\25\6\1\0\10\6"+
    "\106\0\66\6\3\0\1\6\22\0\1\6\7\0\12\6"+
    "\4\0\12\101\1\0\20\6\4\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6"+
    "\3\0\1\6\20\0\1\6\15\0\2\6\1\0\3\6"+
    "\4\0\12\101\2\6\12\0\1\6\10\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\37\0\4\6\1\0\1\6\7\0"+
    "\12\101\2\0\3\6\20\0\11\6\1\0\3\6\1\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\3\0"+
    "\1\6\22\0\1\6\17\0\2\6\4\0\12\101\11\0"+
    "\1\6\13\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\3\0\1\6\36\0"+
    "\2\6\1\0\3\6\4\0\12\101\1\0\1\6\21\0"+
    "\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0"+
    "\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0"+
    "\3\6\3\0\14\6\26\0\1\6\25\0\12\101\25\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\20\6\3\0"+
    "\1\6\32\0\3\6\5\0\2\6\4\0\12\101\20\0"+
    "\1\6\4\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\3\0\1\6\40\0\1\6\1\0"+
    "\2\6\4\0\12\101\1\0\2\6\22\0\10\6\1\0"+
    "\3\6\1\0\51\6\2\0\1\6\20\0\1\6\5\0"+
    "\3\6\10\0\3\6\4\0\12\101\12\0\6\6\5\0"+
    "\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0"+
    "\7\6\37\0\12\101\21\0\60\6\1\0\2\6\14\0"+
    "\7\6\11\0\12\101\47\0\2\6\1\0\1\6\1\0"+
    "\5\6\1\0\30\6\1\0\1\6\1\0\12\6\1\0"+
    "\2\6\11\0\1\6\2\0\5\6\1\0\1\6\11\0"+
    "\12\101\2\0\4\6\40\0\1\6\37\0\12\101\26\0"+
    "\10\6\1\0\44\6\33\0\5\6\163\0\53\6\24\0"+
    "\1\6\12\101\6\0\6\6\4\0\4\6\3\0\1\6"+
    "\3\0\2\6\7\0\3\6\4\0\15\6\14\0\1\6"+
    "\1\0\12\101\6\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\53\6\1\0\115\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6"+
    "\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6"+
    "\2\0\103\6\45\0\20\6\20\0\126\6\2\0\6\6"+
    "\3\0\u016c\6\2\0\21\6\1\0\32\6\5\0\113\6"+
    "\6\0\10\6\7\0\15\6\1\0\4\6\16\0\22\6"+
    "\16\0\22\6\16\0\15\6\1\0\3\6\17\0\64\6"+
    "\43\0\1\6\4\0\1\6\3\0\12\101\46\0\12\101"+
    "\6\0\131\6\7\0\5\6\2\0\42\6\1\0\1\6"+
    "\5\0\106\6\12\0\37\6\47\0\12\101\36\6\2\0"+
    "\5\6\13\0\54\6\4\0\32\6\6\0\12\101\46\0"+
    "\27\6\11\0\65\6\53\0\12\101\6\0\12\101\15\0"+
    "\1\6\135\0\57\6\21\0\7\6\4\0\12\101\51\0"+
    "\36\6\15\0\2\6\12\101\54\6\32\0\44\6\34\0"+
    "\12\101\3\0\3\6\12\101\44\6\2\0\11\6\7\0"+
    "\53\6\2\0\3\6\51\0\4\6\1\0\6\6\1\0"+
    "\2\6\3\0\1\6\5\0\300\6\100\0\26\6\2\0"+
    "\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0"+
    "\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0"+
    "\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0"+
    "\3\6\1\0\7\6\164\0\1\6\15\0\1\6\20\0"+
    "\15\6\145\0\1\6\4\0\1\6\2\0\12\6\1\0"+
    "\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0"+
    "\5\6\4\0\1\6\64\0\2\6\u017b\0\57\6\1\0"+
    "\57\6\1\0\205\6\6\0\4\6\3\0\2\6\14\0"+
    "\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0"+
    "\1\6\20\0\27\6\11\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\120\0\1\6\325\0\2\6\52\0"+
    "\5\6\5\0\2\6\4\0\126\6\6\0\3\6\1\0"+
    "\132\6\1\0\4\6\5\0\53\6\1\0\136\6\21\0"+
    "\33\6\65\0\306\6\112\0\360\6\20\0\215\6\103\0"+
    "\56\6\2\0\15\6\3\0\20\6\12\101\2\6\24\0"+
    "\57\6\20\0\37\6\2\0\106\6\61\0\11\6\2\0"+
    "\147\6\2\0\65\6\2\0\5\6\60\0\13\6\1\0"+
    "\3\6\1\0\4\6\1\0\27\6\35\0\64\6\16\0"+
    "\62\6\34\0\12\101\30\0\6\6\3\0\1\6\1\0"+
    "\2\6\1\0\12\101\34\6\12\0\27\6\31\0\35\6"+
    "\7\0\57\6\34\0\1\6\12\101\6\0\5\6\1\0"+
    "\12\6\12\101\5\6\1\0\51\6\27\0\3\6\1\0"+
    "\10\6\4\0\12\101\6\0\27\6\3\0\1\6\3\0"+
    "\62\6\1\0\1\6\3\0\2\6\2\0\5\6\2\0"+
    "\1\6\1\0\1\6\30\0\3\6\2\0\13\6\7\0"+
    "\3\6\14\0\6\6\2\0\6\6\2\0\6\6\11\0"+
    "\7\6\1\0\7\6\1\0\53\6\1\0\14\6\10\0"+
    "\163\6\15\0\12\101\6\0\244\6\14\0\27\6\4\0"+
    "\61\6\4\0\156\6\2\0\152\6\46\0\7\6\14\0"+
    "\5\6\5\0\1\6\1\0\12\6\1\0\15\6\1\0"+
    "\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0"+
    "\154\6\41\0\153\6\22\0\100\6\2\0\66\6\50\0"+
    "\14\6\164\0\5\6\1\0\207\6\23\0\12\101\7\0"+
    "\32\6\6\0\32\6\13\0\131\6\3\0\6\6\2\0"+
    "\6\6\2\0\6\6\2\0\3\6\43\0\14\6\1\0"+
    "\32\6\1\0\23\6\1\0\2\6\1\0\17\6\2\0"+
    "\16\6\42\0\173\6\205\0\35\6\3\0\61\6\57\0"+
    "\40\6\15\0\24\6\1\0\10\6\6\0\46\6\12\0"+
    "\36\6\2\0\44\6\4\0\10\6\60\0\236\6\2\0"+
    "\12\101\6\0\44\6\4\0\44\6\4\0\50\6\10\0"+
    "\64\6\234\0\67\6\11\0\26\6\12\0\10\6\230\0"+
    "\6\6\2\0\1\6\1\0\54\6\1\0\2\6\3\0"+
    "\1\6\2\0\27\6\12\0\27\6\11\0\37\6\101\0"+
    "\23\6\1\0\2\6\12\0\26\6\12\0\32\6\106\0"+
    "\70\6\6\0\2\6\100\0\1\6\17\0\4\6\1\0"+
    "\3\6\1\0\35\6\52\0\35\6\3\0\35\6\43\0"+
    "\10\6\1\0\34\6\33\0\66\6\12\0\26\6\12\0"+
    "\23\6\15\0\22\6\156\0\111\6\67\0\63\6\15\0"+
    "\63\6\15\0\44\6\14\0\12\101\306\0\35\6\12\0"+
    "\1\6\10\0\26\6\232\0\27\6\14\0\65\6\56\0"+
    "\12\101\23\0\55\6\40\0\31\6\7\0\12\101\11\0"+
    "\44\6\17\0\12\101\4\0\1\6\13\0\43\6\3\0"+
    "\1\6\14\0\60\6\16\0\4\6\13\0\12\101\1\6"+
    "\1\0\1\6\43\0\22\6\1\0\31\6\124\0\7\6"+
    "\1\0\1\6\1\0\4\6\1\0\17\6\1\0\12\6"+
    "\7\0\57\6\21\0\12\101\13\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\3\0\1\6\22\0\1\6\14\0\5\6\236\0\65\6"+
    "\22\0\4\6\5\0\12\101\5\0\1\6\40\0\60\6"+
    "\24\0\2\6\1\0\1\6\10\0\12\101\246\0\57\6"+
    "\51\0\4\6\44\0\60\6\24\0\1\6\13\0\12\101"+
    "\46\0\53\6\15\0\1\6\7\0\12\101\66\0\33\6"+
    "\25\0\12\101\306\0\54\6\164\0\100\6\12\101\25\0"+
    "\1\6\240\0\10\6\2\0\47\6\20\0\1\6\1\0"+
    "\1\6\34\0\1\6\12\0\50\6\7\0\1\6\25\0"+
    "\1\6\13\0\56\6\23\0\1\6\42\0\71\6\7\0"+
    "\11\6\1\0\45\6\21\0\1\6\17\0\12\101\30\0"+
    "\36\6\160\0\7\6\1\0\2\6\1\0\46\6\25\0"+
    "\1\6\11\0\12\101\6\0\6\6\1\0\2\6\1\0"+
    "\40\6\16\0\1\6\7\0\12\101\u0136\0\23\6\15\0"+
    "\232\6\346\0\304\6\274\0\57\6\321\0\107\6\271\0"+
    "\71\6\7\0\37\6\1\0\12\101\146\0\36\6\22\0"+
    "\60\6\20\0\4\6\14\0\12\101\11\0\25\6\5\0"+
    "\23\6\260\0\100\6\200\0\113\6\5\0\1\6\102\0"+
    "\15\6\100\0\2\6\1\0\1\6\34\0\370\6\10\0"+
    "\363\6\15\0\37\6\61\0\3\6\21\0\4\6\10\0"+
    "\u018c\6\4\0\153\6\5\0\15\6\3\0\11\6\7\0"+
    "\12\6\146\0\125\6\1\0\107\6\1\0\2\6\2\0"+
    "\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0"+
    "\1\6\1\0\7\6\1\0\101\6\1\0\4\6\2\0"+
    "\10\6\1\0\7\6\1\0\34\6\1\0\4\6\1\0"+
    "\5\6\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0"+
    "\31\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\37\6\1\0\31\6\1\0\10\6\2\0\62\101\55\6"+
    "\12\0\7\6\2\0\12\101\4\0\1\6\u0171\0\54\6"+
    "\4\0\12\101\6\0\305\6\73\0\104\6\7\0\1\6"+
    "\4\0\12\101\246\0\4\6\1\0\33\6\1\0\2\6"+
    "\1\0\1\6\2\0\1\6\1\0\12\6\1\0\4\6"+
    "\1\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6"+
    "\1\0\1\6\2\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\1\0\1\6"+
    "\2\0\4\6\1\0\7\6\1\0\4\6\1\0\4\6"+
    "\1\0\1\6\1\0\12\6\1\0\21\6\5\0\3\6"+
    "\1\0\5\6\1\0\21\6\104\0\327\6\51\0\65\6"+
    "\13\0\336\6\2\0\u0182\6\16\0\u0131\6\37\0\36\6"+
    "\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\13\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\21\6\1\27\1\30\1\31\1\32\1\33\1\32"+
    "\1\34\1\32\1\35\2\32\1\36\1\37\1\21\2\0"+
    "\1\40\2\0\1\41\1\42\1\41\2\0\1\17\5\0"+
    "\1\43\1\0\1\44\1\0\10\6\1\44\1\6\1\44"+
    "\3\6\1\45\7\6\1\46\1\47\1\0\1\50\7\0"+
    "\1\51\1\52\1\53\1\0\1\42\1\0\1\41\4\17"+
    "\1\54\3\6\1\13\3\6\1\45\7\6\2\0\1\55"+
    "\2\0\1\56\6\6\1\57\3\6\1\60\2\0\1\61"+
    "\1\45\4\6\2\0\1\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u01ce\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a"+
    "\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u039c\0\u03de\0\u0420"+
    "\0\u0462\0\u01ce\0\u04a4\0\u04e6\0\u01ce\0\u01ce\0\u01ce\0\u01ce"+
    "\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6"+
    "\0\u0738\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906"+
    "\0\u0948\0\u01ce\0\u098a\0\u01ce\0\u01ce\0\u09cc\0\u0a0e\0\u01ce"+
    "\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u01ce\0\u01ce\0\u01ce\0\u0b58"+
    "\0\u0b9a\0\u01ce\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26"+
    "\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u01ce"+
    "\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104"+
    "\0\u1146\0\u1188\0\u11ca\0\u02d6\0\u120c\0\u124e\0\u1290\0\u12d2"+
    "\0\u1314\0\u02d6\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0"+
    "\0\u14e2\0\u01ce\0\u01ce\0\u0a0e\0\u01ce\0\u1524\0\u1566\0\u15a8"+
    "\0\u0ad4\0\u15ea\0\u162c\0\u166e\0\u01ce\0\u01ce\0\u01ce\0\u16b0"+
    "\0\u01ce\0\u16f2\0\u1734\0\u01ce\0\u1776\0\u17b8\0\u17fa\0\u01ce"+
    "\0\u183c\0\u187e\0\u18c0\0\u02d6\0\u1902\0\u1944\0\u1986\0\u19c8"+
    "\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u124e\0\u1b96"+
    "\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6"+
    "\0\u1de8\0\u1e2a\0\u1e6c\0\u02d6\0\u1eae\0\u1ef0\0\u1f32\0\u02d6"+
    "\0\u1f74\0\u1fb6\0\u01ce\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100"+
    "\0\u2142\0\u2184\0\u21c6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\10\31\1\32\1\33\1\34\1\35\1\36\5\16"+
    "\1\37\1\10\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\16\1\46\1\16\1\47\1\16\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\3\16"+
    "\1\62\1\63\1\64\2\10\2\65\1\12\1\65\1\66"+
    "\37\65\1\67\37\65\1\70\1\65\1\71\37\65\1\67"+
    "\37\65\1\12\5\65\1\72\33\65\1\73\37\65\1\70"+
    "\5\65\1\74\33\65\1\67\35\65\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\75"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\10\31\1\32"+
    "\1\33\1\34\1\35\1\36\5\16\1\37\1\10\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\16\1\46\1\16"+
    "\1\47\1\16\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\3\16\1\62\1\63\1\64"+
    "\3\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\76\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\10\31\1\32\1\33\1\34\1\35\1\36\5\16"+
    "\1\37\1\10\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\16\1\46\1\16\1\47\1\16\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\3\16"+
    "\1\62\1\63\1\64\2\10\135\0\1\77\44\0\1\77"+
    "\5\0\1\100\101\0\1\14\1\101\1\16\1\0\1\20"+
    "\25\0\5\16\3\0\27\16\13\0\1\16\11\0\11\16"+
    "\5\0\5\16\3\0\27\16\4\0\1\16\7\0\1\102"+
    "\102\0\1\103\107\0\1\104\1\0\11\105\70\0\1\106"+
    "\100\0\1\107\1\0\11\110\6\0\1\111\1\112\1\0"+
    "\1\113\3\0\1\114\1\0\1\115\2\0\1\111\7\0"+
    "\1\116\7\0\1\113\24\0\1\107\1\0\11\31\6\0"+
    "\1\111\1\112\5\0\1\117\4\0\1\111\61\0\1\77"+
    "\101\0\1\120\44\0\1\77\6\0\1\121\1\16\11\0"+
    "\11\16\5\0\5\16\3\0\1\122\26\16\1\0\1\123"+
    "\2\0\1\16\6\0\1\16\11\0\11\16\5\0\5\16"+
    "\3\0\14\16\1\124\12\16\4\0\1\16\6\0\1\16"+
    "\11\0\11\16\5\0\5\16\3\0\15\16\1\125\10\16"+
    "\1\126\4\0\1\16\6\0\1\16\11\0\11\16\5\0"+
    "\5\16\3\0\12\16\1\127\14\16\4\0\1\16\6\0"+
    "\1\16\11\0\11\16\5\0\5\16\3\0\10\16\1\130"+
    "\16\16\4\0\1\16\6\0\1\16\11\0\11\16\5\0"+
    "\5\16\3\0\1\16\1\131\10\16\1\132\2\16\1\133"+
    "\11\16\4\0\1\16\6\0\1\16\11\0\11\16\5\0"+
    "\5\16\3\0\6\16\1\134\4\16\1\135\1\136\12\16"+
    "\4\0\1\16\6\0\1\16\11\0\11\16\5\0\5\16"+
    "\3\0\5\16\1\137\21\16\4\0\1\16\6\0\1\16"+
    "\11\0\11\16\5\0\5\16\3\0\15\16\1\140\11\16"+
    "\4\0\1\16\6\0\1\16\11\0\11\16\5\0\5\16"+
    "\3\0\23\16\1\141\3\16\4\0\1\16\6\0\1\16"+
    "\11\0\11\16\5\0\5\16\3\0\20\16\1\142\6\16"+
    "\4\0\1\16\6\0\1\16\11\0\11\16\5\0\5\16"+
    "\3\0\1\16\1\143\25\16\4\0\1\16\6\0\1\16"+
    "\11\0\11\16\5\0\5\16\3\0\23\16\1\144\3\16"+
    "\4\0\1\16\6\0\1\16\11\0\11\16\5\0\5\16"+
    "\3\0\5\16\1\145\15\16\1\146\3\16\4\0\1\16"+
    "\6\0\1\16\11\0\11\16\5\0\5\16\3\0\22\16"+
    "\1\147\4\16\4\0\1\16\6\0\1\16\11\0\11\16"+
    "\5\0\5\16\3\0\20\16\1\150\6\16\4\0\1\16"+
    "\6\0\1\16\11\0\11\16\5\0\5\16\3\0\10\16"+
    "\1\151\16\16\4\0\1\16\76\0\1\152\10\0\1\66"+
    "\100\0\1\153\1\154\2\0\1\153\1\155\5\0\1\153"+
    "\21\0\1\156\2\0\1\153\2\0\2\153\3\0\1\153"+
    "\5\0\1\153\3\0\1\153\1\0\1\153\1\157\1\153"+
    "\13\0\1\160\102\0\1\72\100\0\1\153\1\161\2\0"+
    "\1\153\1\155\5\0\1\153\7\162\12\0\1\156\2\0"+
    "\1\153\2\0\2\153\3\0\1\153\5\0\1\153\3\0"+
    "\1\153\1\0\1\153\1\157\1\153\1\163\16\0\1\164"+
    "\75\0\1\165\101\0\1\14\1\101\2\0\1\20\101\0"+
    "\1\166\107\0\1\167\103\0\11\105\6\0\1\111\1\112"+
    "\5\0\1\170\4\0\1\111\26\0\2\106\1\171\77\106"+
    "\20\0\11\105\6\0\1\111\13\0\1\111\44\0\1\107"+
    "\1\0\11\110\6\0\1\111\1\112\5\0\1\114\4\0"+
    "\1\111\42\0\1\172\3\0\11\173\127\0\1\174\43\0"+
    "\11\175\5\0\2\175\7\0\6\175\45\0\11\110\71\0"+
    "\2\176\100\0\7\177\73\0\11\31\57\0\1\16\27\0"+
    "\5\16\3\0\27\16\13\0\1\122\11\0\11\122\5\0"+
    "\5\122\3\0\27\122\4\0\1\122\46\0\1\200\41\0"+
    "\1\16\11\0\11\16\5\0\5\16\3\0\4\16\1\142"+
    "\22\16\4\0\1\16\6\0\1\16\11\0\11\16\5\0"+
    "\5\16\3\0\15\16\1\201\11\16\4\0\1\16\6\0"+
    "\1\16\11\0\11\16\5\0\5\16\3\0\22\16\1\202"+
    "\4\16\4\0\1\16\6\0\1\16\11\0\11\16\5\0"+
    "\5\16\3\0\15\16\1\203\11\16\4\0\1\16\6\0"+
    "\1\16\11\0\11\16\5\0\5\16\3\0\24\16\1\204"+
    "\2\16\4\0\1\16\6\0\1\16\11\0\11\16\5\0"+
    "\5\16\3\0\12\16\1\205\14\16\4\0\1\16\6\0"+
    "\1\16\11\0\11\16\5\0\5\16\3\0\15\16\1\206"+
    "\11\16\4\0\1\16\6\0\1\16\11\0\11\16\5\0"+
    "\5\16\3\0\20\16\1\134\6\16\4\0\1\16\6\0"+
    "\1\16\11\0\11\16\5\0\5\16\3\0\16\16\1\207"+
    "\10\16\4\0\1\16\6\0\1\16\11\0\11\16\5\0"+
    "\5\16\3\0\22\16\1\210\4\16\4\0\1\16\6\0"+
    "\1\16\11\0\11\16\5\0\5\16\3\0\14\16\1\142"+
    "\5\16\1\134\4\16\4\0\1\16\6\0\1\16\11\0"+
    "\11\16\5\0\5\16\3\0\4\16\1\204\22\16\4\0"+
    "\1\16\6\0\1\16\11\0\11\16\5\0\5\16\3\0"+
    "\12\16\1\211\1\212\13\16\4\0\1\16\6\0\1\16"+
    "\11\0\11\16\5\0\5\16\3\0\3\16\1\213\23\16"+
    "\4\0\1\16\6\0\1\16\11\0\11\16\5\0\5\16"+
    "\3\0\15\16\1\204\11\16\4\0\1\16\6\0\1\16"+
    "\11\0\11\16\5\0\5\16\3\0\13\16\1\204\13\16"+
    "\4\0\1\16\6\0\1\16\11\0\11\16\5\0\5\16"+
    "\3\0\14\16\1\214\12\16\4\0\1\16\6\0\1\16"+
    "\11\0\11\16\5\0\5\16\3\0\20\16\1\215\6\16"+
    "\4\0\1\16\6\0\1\16\11\0\11\16\5\0\5\16"+
    "\3\0\23\16\1\216\3\16\4\0\1\16\6\0\1\16"+
    "\11\0\11\16\5\0\5\16\3\0\14\16\1\217\12\16"+
    "\4\0\1\16\20\0\11\220\5\0\2\220\7\0\6\220"+
    "\45\0\11\221\5\0\2\221\7\0\6\221\31\0\1\222"+
    "\115\0\7\223\73\0\11\224\5\0\2\224\7\0\6\224"+
    "\35\0\1\225\111\0\11\105\71\0\11\173\71\0\11\173"+
    "\15\0\1\172\53\0\11\175\5\0\2\175\6\0\1\113"+
    "\6\175\45\0\2\176\24\0\1\115\53\0\7\177\17\0"+
    "\1\116\41\0\1\16\11\0\11\16\5\0\5\16\3\0"+
    "\12\16\1\142\14\16\4\0\1\16\6\0\1\16\11\0"+
    "\11\16\5\0\5\16\3\0\5\16\1\226\21\16\4\0"+
    "\1\16\6\0\1\16\11\0\11\16\5\0\5\16\3\0"+
    "\21\16\1\214\5\16\4\0\1\16\6\0\1\16\11\0"+
    "\11\16\5\0\5\16\3\0\21\16\1\216\5\16\4\0"+
    "\1\16\6\0\1\16\11\0\11\16\5\0\5\16\3\0"+
    "\1\16\1\227\25\16\4\0\1\16\6\0\1\16\11\0"+
    "\11\16\5\0\5\16\3\0\15\16\1\230\11\16\4\0"+
    "\1\16\6\0\1\16\11\0\1\16\1\231\1\16\1\232"+
    "\2\16\1\233\1\142\1\16\5\0\5\16\3\0\27\16"+
    "\4\0\1\16\6\0\1\16\11\0\11\16\5\0\5\16"+
    "\3\0\12\16\1\234\14\16\4\0\1\16\6\0\1\16"+
    "\11\0\11\16\5\0\5\16\3\0\2\16\1\235\24\16"+
    "\4\0\1\16\6\0\1\16\11\0\11\16\5\0\5\16"+
    "\3\0\11\16\1\236\15\16\4\0\1\16\6\0\1\16"+
    "\11\0\11\16\5\0\5\16\3\0\5\16\1\142\21\16"+
    "\4\0\1\16\6\0\1\16\11\0\11\16\5\0\5\16"+
    "\3\0\10\16\1\237\16\16\4\0\1\16\6\0\1\16"+
    "\11\0\11\16\5\0\5\16\3\0\5\16\1\240\21\16"+
    "\4\0\1\16\20\0\11\241\5\0\2\241\7\0\6\241"+
    "\45\0\11\242\5\0\2\242\7\0\6\242\32\0\1\222"+
    "\114\0\7\243\73\0\11\243\5\0\2\243\7\0\6\243"+
    "\32\0\1\225\102\0\1\16\11\0\11\16\5\0\5\16"+
    "\3\0\21\16\1\142\5\16\4\0\1\16\6\0\1\16"+
    "\11\0\11\16\5\0\5\16\3\0\22\16\1\244\4\16"+
    "\4\0\1\16\6\0\1\16\11\0\11\16\5\0\5\16"+
    "\3\0\20\16\1\245\6\16\4\0\1\16\6\0\1\16"+
    "\11\0\2\16\1\246\3\16\1\142\2\16\5\0\5\16"+
    "\3\0\27\16\4\0\1\16\6\0\1\16\11\0\2\16"+
    "\1\142\6\16\5\0\5\16\3\0\27\16\4\0\1\16"+
    "\6\0\1\16\11\0\4\16\1\142\4\16\5\0\5\16"+
    "\3\0\27\16\4\0\1\16\6\0\1\16\11\0\11\16"+
    "\5\0\5\16\3\0\5\16\1\53\21\16\4\0\1\16"+
    "\6\0\1\16\11\0\11\16\5\0\5\16\3\0\1\16"+
    "\1\247\25\16\4\0\1\16\6\0\1\16\11\0\11\16"+
    "\5\0\5\16\3\0\14\16\1\250\12\16\4\0\1\16"+
    "\20\0\11\251\5\0\2\251\7\0\6\251\45\0\11\252"+
    "\5\0\2\252\7\0\6\252\33\0\1\16\11\0\3\16"+
    "\1\232\2\16\1\233\2\16\5\0\5\16\3\0\27\16"+
    "\4\0\1\16\6\0\1\16\11\0\11\16\5\0\5\16"+
    "\3\0\22\16\1\134\4\16\4\0\1\16\6\0\1\16"+
    "\11\0\7\16\1\142\1\16\5\0\5\16\3\0\27\16"+
    "\4\0\1\16\6\0\1\16\11\0\11\16\5\0\5\16"+
    "\3\0\7\16\1\253\17\16\4\0\1\16\6\0\1\16"+
    "\11\0\11\16\5\0\5\16\3\0\7\16\1\142\17\16"+
    "\4\0\1\16\20\0\11\157\5\0\2\157\7\0\6\157"+
    "\45\0\11\153\5\0\2\153\7\0\6\153\33\0\1\16"+
    "\11\0\11\16\5\0\5\16\3\0\5\16\1\134\21\16"+
    "\4\0\1\16";

  private static int [] zzUnpacktrans() {
    int [] result = new int[8712];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\3\11\6\1\5\11\4\1\1\11\2\1\4\11"+
    "\21\1\1\11\1\1\2\11\2\1\1\11\4\1\3\11"+
    "\2\0\1\11\2\0\3\1\2\0\1\1\5\0\1\11"+
    "\1\0\1\1\1\0\26\1\2\11\1\0\1\11\7\0"+
    "\3\11\1\0\1\11\1\0\1\1\1\11\3\1\1\11"+
    "\17\1\2\0\1\1\2\0\14\1\2\0\1\11\5\1"+
    "\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[171];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _CueLexer() {
    this((java.io.Reader)null);
  }

  private final IntArrayList stateStack = new IntArrayList(100);

  // the number of # characters, which define the current escape character, e.g. 1 for \#<escaped>
  private int escapePrefixLength = 0;
  // the escape prefix lengths of previous states on the stack
  // nesting is possible because of interpolations
  private final IntArrayList escapePrefixLengthStack = new IntArrayList(100);

  private void pushState(int state) {
      int currentState = yystate();
      if (currentState == YYINITIAL && !stateStack.isEmpty()) {
          throw new IllegalStateException("Can't push initial state into the not empty stack");
      }
      stateStack.push(currentState);
      yybegin(state);

      escapePrefixLengthStack.push(escapePrefixLength);
      escapePrefixLength = 0;
  }

  private void popState() {
    assert !stateStack.isEmpty() : "States stack is empty";
    yybegin(stateStack.popInt());

    assert !escapePrefixLengthStack.isEmpty() : "Escape prefix length stack is empty";
    escapePrefixLength = escapePrefixLengthStack.popInt();
  }

  /** Called when an instance is reset, e.g. on incremental lexer restart */
  protected void onReset() {
    stateStack.clear();

    escapePrefixLength = 0;
    escapePrefixLengthStack.clear();
  }

  private void updateEscapePrefix() {
      int length = yylength();
      while (escapePrefixLength < length && yycharat(escapePrefixLength) == '#') {
          escapePrefixLength++;
      }
  }

  private boolean isEscapePrefix() {
      return isEscapePrefix(0);
  }

  private boolean isEscapePrefix(int startOffset) {
      int count = 0;
      int length = yylength();
      for (int i = startOffset; i < length; i++) {
          if (yycharat(i) != '#') {
              break;
          }
          count++;
      }
      return count == escapePrefixLength;
  }

  private boolean isEscapeSuffix() {
      int count = 0;
      int length = yylength();
      for (int i = length - 1; i >= 0; i--) {
          if (yycharat(i) != '#') {
              break;
          }
          count++;
      }
      return count == escapePrefixLength;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CueLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 50: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 51: break;
          case 3:
            { return WHITE_SPACE_NEWLINE;
            }
          // fall through
          case 52: break;
          case 4:
            { return EXCL;
            }
          // fall through
          case 53: break;
          case 5:
            { pushState(STRING_LITERAL); updateEscapePrefix(); return DOUBLE_QUOTE;
            }
          // fall through
          case 54: break;
          case 6:
            { return IDENTIFIER;
            }
          // fall through
          case 55: break;
          case 7:
            { return OP_UNIFICATION;
            }
          // fall through
          case 56: break;
          case 8:
            { pushState(BYTE_LITERAL); updateEscapePrefix(); return SINGLE_QUOTE;
            }
          // fall through
          case 57: break;
          case 9:
            { pushState(PARENTHESIS); return LEFT_PAREN;
            }
          // fall through
          case 58: break;
          case 10:
            { return RIGHT_PAREN;
            }
          // fall through
          case 59: break;
          case 11:
            { return MUL_OP;
            }
          // fall through
          case 60: break;
          case 12:
            { return ADD_OP;
            }
          // fall through
          case 61: break;
          case 13:
            { return COMMA;
            }
          // fall through
          case 62: break;
          case 14:
            { return DOT;
            }
          // fall through
          case 63: break;
          case 15:
            { return INT_LIT;
            }
          // fall through
          case 64: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 65: break;
          case 17:
            { return REL_OP;
            }
          // fall through
          case 66: break;
          case 18:
            { return EQ;
            }
          // fall through
          case 67: break;
          case 19:
            { return QMARK;
            }
          // fall through
          case 68: break;
          case 20:
            { return AT;
            }
          // fall through
          case 69: break;
          case 21:
            { return LEFT_BRACKET;
            }
          // fall through
          case 70: break;
          case 22:
            { return RIGHT_BRACKET;
            }
          // fall through
          case 71: break;
          case 23:
            { return LEFT_CURLY;
            }
          // fall through
          case 72: break;
          case 24:
            { return OP_DISJUNCTION;
            }
          // fall through
          case 73: break;
          case 25:
            { return RIGHT_CURLY;
            }
          // fall through
          case 74: break;
          case 26:
            { return UNICODE_VALUE;
            }
          // fall through
          case 75: break;
          case 27:
            { if (isEscapeSuffix()) { popState(); return DOUBLE_QUOTE_END; } else { return UNICODE_VALUE; }
            }
          // fall through
          case 76: break;
          case 28:
            { return NEWLINE;
            }
          // fall through
          case 77: break;
          case 29:
            { if (isEscapeSuffix()) { popState(); return SINGLE_QUOTE_END; } else { return UNICODE_VALUE; }
            }
          // fall through
          case 78: break;
          case 30:
            { popState(); return INTERPOLATION_END;
            }
          // fall through
          case 79: break;
          case 31:
            { popState(); return RIGHT_PAREN;
            }
          // fall through
          case 80: break;
          case 32:
            { return OP_AND;
            }
          // fall through
          case 81: break;
          case 33:
            { return FLOAT_LIT;
            }
          // fall through
          case 82: break;
          case 34:
            { return COMMENT;
            }
          // fall through
          case 83: break;
          case 35:
            { return OP_EQ;
            }
          // fall through
          case 84: break;
          case 36:
            { return KEYWORD;
            }
          // fall through
          case 85: break;
          case 37:
            { return IDENTIFIER_PREDECLARED;
            }
          // fall through
          case 86: break;
          case 38:
            { return OP_OR;
            }
          // fall through
          case 87: break;
          case 39:
            { if (isEscapePrefix(1)) { return ESCAPED_CHAR; } else { return UNICODE_VALUE; }
            }
          // fall through
          case 88: break;
          case 40:
            { if (isEscapePrefix(1)) { pushState(INTERPOLATION); return INTERPOLATION_START; } else { return UNICODE_VALUE; }
            }
          // fall through
          case 89: break;
          case 41:
            { pushState(STRING_MULTILINE); updateEscapePrefix(); return MULTILINE_STRING_START;
            }
          // fall through
          case 90: break;
          case 42:
            { pushState(BYTES_MULTILINE); updateEscapePrefix(); return MULTILINE_BYTES_START;
            }
          // fall through
          case 91: break;
          case 43:
            { return ELLIPSIS_TOKEN;
            }
          // fall through
          case 92: break;
          case 44:
            { return BOTTOM_LIT;
            }
          // fall through
          case 93: break;
          case 45:
            { if (isEscapeSuffix()) { popState(); return MULTILINE_STRING_END; } else { return UNICODE_VALUE; }
            }
          // fall through
          case 94: break;
          case 46:
            { if (isEscapeSuffix()) { popState(); return MULTILINE_BYTES_END; } else { return UNICODE_VALUE; }
            }
          // fall through
          case 95: break;
          case 47:
            { return NULL_LIT;
            }
          // fall through
          case 96: break;
          case 48:
            { return BOOL_LIT;
            }
          // fall through
          case 97: break;
          case 49:
            { return BYTE_VALUE;
            }
          // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
