/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package dev.monogon.cue.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.IntStack;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static dev.monogon.cue.lang.CueTypes.*;
import static dev.monogon.cue.lang.CueTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/home/jansorg/self-employment/customers/nexenta-cuelang/intellij-cue/src/grammar/cue.flex</tt>
 */
public class _CueLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_LITERAL = 2;
  public static final int STRING_MULTILINE = 4;
  public static final int BYTE_LITERAL = 6;
  public static final int BYTES_MULTILINE = 8;
  public static final int EXPRESSION = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14432 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\102\1\36\1\56\1\103\1\1\1\60\1\53\1\104\1\100\1"+
    "\36\1\13\1\105\1\60\1\106\1\53\1\107\1\110\1\111\1\13\1\112\1\113\1\1\1\65"+
    "\1\1\1\25\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122\1\123\2"+
    "\1\1\71\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\30\1\127\1\115"+
    "\1\130\1\131\1\132\1\133\1\115\2\13\1\134\2\13\1\135\24\13\1\136\1\137\2\13"+
    "\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\30\2\1\1\13\1\1\5\13\1\142"+
    "\1\25\45\13\1\143\1\13\1\144\1\30\4\13\1\30\1\145\1\146\1\16\1\13\1\16\1\13"+
    "\1\16\1\146\1\71\3\13\1\147\1\1\1\150\1\115\2\1\1\115\5\13\1\27\1\151\1\13"+
    "\1\152\4\13\1\40\1\13\1\153\2\1\1\65\1\13\1\154\1\155\2\13\1\156\1\13\1\77"+
    "\1\115\2\1\1\13\1\113\3\13\1\155\2\1\2\115\1\157\5\1\1\110\2\13\1\147\1\160"+
    "\1\115\2\1\1\161\1\13\1\162\1\42\2\13\1\40\1\1\2\13\1\147\1\1\1\163\1\42\1"+
    "\13\1\154\1\46\5\1\1\164\1\165\14\13\4\1\21\13\1\142\2\13\1\142\1\166\1\13"+
    "\1\154\3\13\1\167\1\170\1\171\1\125\1\170\1\172\1\1\1\173\2\1\1\174\1\1\1"+
    "\175\1\1\1\125\6\1\1\176\1\177\1\200\1\201\1\202\3\1\1\203\147\1\2\13\1\153"+
    "\2\13\1\153\10\13\1\204\1\205\2\13\1\134\3\13\1\206\1\1\1\13\1\113\4\207\4"+
    "\1\1\127\35\1\1\210\2\1\1\211\1\25\4\13\1\212\1\25\4\13\1\135\1\110\1\13\1"+
    "\154\1\25\4\13\1\153\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1"+
    "\40\2\1\10\13\1\125\4\1\2\13\1\154\20\13\1\125\1\13\1\213\1\1\2\13\1\153\1"+
    "\127\1\13\1\154\4\13\1\40\2\1\1\214\1\215\5\13\1\216\1\13\1\153\1\27\3\1\1"+
    "\214\1\217\1\13\1\31\1\1\3\13\1\147\1\215\2\13\1\147\1\1\1\115\1\1\1\220\1"+
    "\42\1\13\1\40\1\13\1\113\1\1\1\13\1\125\1\50\2\13\1\31\1\127\1\115\1\221\1"+
    "\222\2\13\1\46\1\1\1\223\1\115\1\13\1\224\3\13\1\225\1\226\1\227\1\30\1\66"+
    "\1\230\1\231\1\207\2\13\1\135\1\40\7\13\1\31\1\115\72\13\1\147\1\13\1\232"+
    "\2\13\1\156\20\1\26\13\1\154\6\13\1\77\2\1\1\113\1\233\1\56\1\234\1\235\6"+
    "\13\1\16\1\1\1\161\25\13\1\154\1\1\4\13\1\215\2\13\1\27\2\1\1\156\7\1\1\221"+
    "\7\13\1\125\1\1\1\115\1\25\1\30\1\25\1\30\1\236\4\13\1\153\1\237\1\240\2\1"+
    "\1\241\1\13\1\14\1\242\2\154\2\1\7\13\1\30\30\1\1\13\1\125\3\13\1\71\2\1\2"+
    "\13\1\1\1\13\1\243\2\13\1\40\1\13\1\154\2\13\1\244\3\1\11\13\1\154\1\115\2"+
    "\13\1\244\1\13\1\156\2\13\1\27\3\13\1\147\11\1\23\13\1\113\1\13\1\40\1\27"+
    "\11\1\1\245\2\13\1\246\1\13\1\40\1\13\1\113\1\13\1\153\4\1\1\13\1\247\1\13"+
    "\1\40\1\13\1\77\4\1\3\13\1\250\4\1\1\71\1\251\1\13\1\147\2\1\1\13\1\125\1"+
    "\13\1\125\2\1\1\124\1\13\1\155\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16"+
    "\6\1\4\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\161\2\13\1\27\2\1\1\65\1\1\1"+
    "\161\2\13\2\1\1\13\1\46\1\115\1\161\1\13\1\113\1\65\1\1\2\13\1\252\1\161\2"+
    "\13\1\31\1\253\1\254\2\1\1\13\1\22\1\156\5\1\1\255\1\256\1\46\2\13\1\153\1"+
    "\1\1\115\1\73\1\55\1\56\1\70\1\1\1\257\1\16\11\1\3\13\1\155\1\260\1\115\2"+
    "\1\3\13\1\1\1\261\1\115\12\1\2\13\1\153\2\1\1\262\2\1\3\13\1\1\1\263\1\115"+
    "\2\1\2\13\1\30\1\1\1\115\3\1\1\13\1\77\1\1\1\115\26\1\4\13\1\115\1\127\34"+
    "\1\3\13\1\46\20\1\1\56\1\13\1\153\1\1\1\71\1\115\1\1\1\215\1\13\67\1\71\13"+
    "\1\77\16\1\14\13\1\147\53\1\2\13\1\153\75\1\44\13\1\113\33\1\43\13\1\46\1"+
    "\13\1\153\1\115\6\1\1\13\1\154\1\1\3\13\1\1\1\147\1\115\1\161\1\264\1\13\67"+
    "\1\4\13\1\155\1\71\3\1\1\161\4\1\1\71\1\1\76\13\1\125\1\1\57\13\1\31\20\1"+
    "\1\16\77\1\6\13\1\30\1\125\1\46\1\77\66\1\5\13\1\221\3\13\1\146\1\265\1\266"+
    "\1\267\3\13\1\270\1\271\1\13\1\272\1\273\1\36\24\13\1\274\1\13\1\36\1\135"+
    "\1\13\1\135\1\13\1\221\1\13\1\221\1\153\1\13\1\153\1\13\1\56\1\13\1\56\1\13"+
    "\1\275\3\276\14\13\1\155\3\1\4\13\1\147\1\115\112\1\1\267\1\13\1\277\1\300"+
    "\1\301\1\302\1\303\1\304\1\305\1\156\1\306\1\156\24\1\55\13\1\113\2\1\103"+
    "\13\1\155\15\13\1\154\150\13\1\16\25\1\41\13\1\154\36\1");

  /* The ZZ_CMAP_A table has 3184 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\3\1\22\0\1\1\1\53\1\65\1\13\2\0\1\50\1\60\1\63\1\64\1\43\1\24"+
    "\1\12\1\24\1\15\1\44\1\11\1\14\6\7\2\6\1\70\1\0\1\55\1\52\1\55\1\56\1\73\4"+
    "\10\1\23\1\10\1\21\3\3\1\21\1\3\1\21\2\3\1\21\3\3\1\21\1\62\2\3\1\17\2\3\1"+
    "\71\1\57\1\72\1\0\1\5\1\0\1\34\1\16\1\37\1\45\1\32\1\33\1\41\1\3\1\22\1\3"+
    "\1\40\1\27\1\42\1\25\1\20\1\36\1\47\1\31\1\35\1\30\1\26\1\46\1\3\1\61\2\3"+
    "\1\66\1\51\1\67\1\54\6\0\1\1\12\0\1\1\11\0\1\3\12\0\1\3\4\0\1\3\5\0\27\3\1"+
    "\0\12\3\4\0\14\3\16\0\5\3\7\0\1\3\1\0\1\3\1\0\5\3\1\0\2\3\2\0\4\3\1\0\1\3"+
    "\6\0\1\3\1\0\3\3\1\0\1\3\1\0\4\3\1\0\23\3\1\0\13\3\10\0\6\3\1\0\26\3\2\0\1"+
    "\3\6\0\10\3\10\0\13\3\5\0\3\3\15\0\12\4\4\0\6\3\1\0\1\3\17\0\2\3\7\0\2\3\12"+
    "\4\3\3\2\0\2\3\1\0\16\3\15\0\11\3\13\0\1\3\16\0\12\4\6\3\4\0\2\3\4\0\1\3\5"+
    "\0\6\3\4\0\1\3\11\0\1\3\3\0\1\3\7\0\11\3\7\0\5\3\1\0\10\3\6\0\26\3\3\0\1\3"+
    "\2\0\1\3\7\0\12\3\4\0\12\4\1\3\4\0\10\3\2\0\2\3\2\0\26\3\1\0\7\3\1\0\1\3\3"+
    "\0\4\3\3\0\1\3\20\0\1\3\15\0\2\3\1\0\1\3\5\0\6\3\4\0\2\3\1\0\2\3\1\0\2\3\1"+
    "\0\2\3\17\0\4\3\1\0\1\3\7\0\12\4\2\0\3\3\20\0\11\3\1\0\2\3\1\0\2\3\1\0\5\3"+
    "\3\0\1\3\2\0\1\3\30\0\1\3\13\0\10\3\2\0\1\3\3\0\1\3\1\0\6\3\3\0\3\3\1\0\4"+
    "\3\3\0\2\3\1\0\1\3\1\0\2\3\3\0\2\3\3\0\3\3\3\0\14\3\13\0\10\3\1\0\2\3\10\0"+
    "\3\3\5\0\1\3\4\0\10\3\1\0\6\3\1\0\5\3\3\0\1\3\3\0\2\3\15\0\13\3\2\0\1\3\6"+
    "\0\3\3\10\0\1\3\12\0\6\3\5\0\22\3\3\0\10\3\1\0\11\3\1\0\1\3\2\0\7\3\11\0\1"+
    "\3\1\0\2\3\14\0\12\4\7\0\2\3\1\0\1\3\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3\1\0\7"+
    "\3\1\0\3\3\1\0\1\3\1\0\1\3\2\0\2\3\1\0\4\3\1\0\2\3\11\0\1\3\2\0\5\3\1\0\1"+
    "\3\11\0\12\4\2\0\14\3\1\0\24\3\13\0\5\3\22\0\7\3\4\0\4\3\3\0\1\3\3\0\2\3\7"+
    "\0\3\3\4\0\15\3\14\0\1\3\1\0\6\3\1\0\1\3\5\0\1\3\2\0\13\3\1\0\15\3\1\0\4\3"+
    "\2\0\7\3\1\0\1\3\1\0\4\3\2\0\1\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4\3\2\0\16\3"+
    "\2\0\6\3\2\0\15\3\2\0\1\3\1\1\17\3\1\0\10\3\7\0\15\3\1\0\6\3\23\0\1\3\4\0"+
    "\1\3\3\0\5\3\2\0\22\3\1\0\1\3\5\0\17\3\1\0\16\3\2\0\5\3\13\0\14\3\13\0\1\3"+
    "\15\0\7\3\7\0\16\3\15\0\2\3\12\4\3\0\3\3\11\0\4\3\1\0\4\3\3\0\2\3\11\0\10"+
    "\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\6\3\1\0\7\3\1\0\1\3\3\0\3\3\1\0\7\3\3\0\4\3"+
    "\2\0\6\3\4\0\13\1\15\0\2\1\5\0\1\1\17\0\1\1\1\0\1\3\15\0\1\3\2\0\1\3\4\0\1"+
    "\3\2\0\12\3\1\0\1\3\3\0\5\3\6\0\1\3\1\0\1\3\1\0\1\3\1\0\4\3\1\0\13\3\2\0\4"+
    "\3\5\0\5\3\4\0\1\3\4\0\2\3\13\0\5\3\6\0\4\3\3\0\2\3\14\0\10\3\7\0\10\3\1\0"+
    "\7\3\1\0\1\1\4\0\2\3\12\0\5\3\5\0\2\3\3\0\7\3\6\0\3\3\12\4\2\3\13\0\11\3\2"+
    "\0\27\3\2\0\7\3\1\0\3\3\1\0\4\3\1\0\4\3\2\0\6\3\3\0\1\3\1\0\1\3\2\0\5\3\1"+
    "\0\12\3\12\4\5\3\1\0\3\3\1\0\10\3\4\0\7\3\3\0\1\3\3\0\2\3\1\0\1\3\3\0\2\3"+
    "\2\0\5\3\2\0\1\3\1\0\1\3\30\0\3\3\3\0\6\3\2\0\6\3\2\0\6\3\11\0\7\3\4\0\5\3"+
    "\3\0\5\3\5\0\1\3\1\0\10\3\1\0\5\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0\12\3\6\0\12"+
    "\3\2\0\6\3\2\0\6\3\2\0\6\3\2\0\3\3\3\0\14\3\1\0\16\3\1\0\2\3\1\0\2\3\1\0\10"+
    "\3\6\0\4\3\4\0\16\3\2\0\1\3\1\0\14\3\1\0\2\3\3\0\1\3\2\0\4\3\1\0\2\3\12\0"+
    "\10\3\6\0\6\3\1\0\3\3\1\0\12\3\3\0\1\3\12\0\4\3\13\0\12\4\1\3\1\0\1\3\3\0"+
    "\7\3\1\0\1\3\1\0\4\3\1\0\17\3\1\0\2\3\14\0\3\3\7\0\4\3\11\0\2\3\1\0\1\3\20"+
    "\0\4\3\10\0\1\3\13\0\10\3\5\0\3\3\2\0\1\3\2\0\2\3\2\0\4\3\1\0\14\3\1\0\1\3"+
    "\1\0\7\3\1\0\21\3\1\0\4\3\2\0\10\3\1\0\7\3\1\0\14\3\1\0\4\3\1\0\5\3\1\0\1"+
    "\3\3\0\14\3\2\0\13\3\1\0\10\3\2\0\22\4\1\0\2\3\1\0\1\3\2\0\1\3\1\0\12\3\1"+
    "\0\4\3\1\0\1\3\1\0\1\3\6\0\1\3\4\0\1\3\1\0\1\3\1\0\1\3\1\0\3\3\1\0\2\3\1\0"+
    "\1\3\2\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\2\3\1\0\1\3\2\0\4\3\1\0\7"+
    "\3\1\0\4\3\1\0\4\3\1\0\1\3\1\0\12\3\1\0\5\3\1\0\3\3\1\0\5\3\1\0\5\3");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\3\1\4\1\1\1\5\1\1"+
    "\1\6\1\3\1\6\7\3\1\6\2\3\2\6\1\7"+
    "\2\6\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\2\23\1\24\1\25\2\23"+
    "\1\26\1\23\1\27\3\0\1\30\1\4\6\0\1\30"+
    "\1\0\1\31\11\3\1\32\2\3\5\0\1\33\4\0"+
    "\1\4\1\30\1\0\3\4\1\0\1\34\3\3\1\6"+
    "\2\3\4\0\1\35\2\0\1\36\2\3\1\37\1\40"+
    "\2\0\1\41\1\3\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u0168"+
    "\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0168\0\u0294\0\u02d0\0\u030c"+
    "\0\u0168\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0"+
    "\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0618\0\u0654"+
    "\0\u0168\0\u0690\0\u0168\0\u0168\0\u06cc\0\u0168\0\u0168\0\u0168"+
    "\0\u0168\0\u0168\0\u0168\0\u0168\0\u0708\0\u0168\0\u0168\0\u0744"+
    "\0\u0780\0\u0168\0\u07bc\0\u0168\0\u0294\0\u07f8\0\u0834\0\u0870"+
    "\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50"+
    "\0\u0a8c\0\u01a4\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4"+
    "\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4"+
    "\0\u0e10\0\u0e4c\0\u0e88\0\u0168\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78"+
    "\0\u0168\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u0168"+
    "\0\u111c\0\u1158\0\u1194\0\u01a4\0\u11d0\0\u120c\0\u1248\0\u1284"+
    "\0\u12c0\0\u12fc\0\u0168\0\u1338\0\u1374\0\u0168\0\u13b0\0\u13ec"+
    "\0\u0168\0\u0168\0\u1428\0\u1464\0\u0168\0\u14a0\0\u14dc\0\u1518";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\11\1\7\1\12\2\13\1\11\1\14"+
    "\1\15\1\16\1\13\1\17\4\11\1\20\1\11\1\21"+
    "\1\22\1\11\1\23\1\24\1\25\1\11\1\26\2\11"+
    "\1\27\3\11\1\30\1\21\1\31\1\32\1\11\1\33"+
    "\1\34\1\35\1\36\1\37\1\7\1\40\1\41\1\7"+
    "\1\42\2\11\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\2\54\1\10\54\54\1\55\5\54"+
    "\1\56\10\54\1\57\54\54\1\55\5\54\1\60\10\54"+
    "\1\10\54\54\1\61\1\62\15\54\1\57\54\54\1\55"+
    "\1\63\13\54\1\7\2\10\1\11\1\7\1\12\2\13"+
    "\1\11\1\14\1\15\1\16\1\13\1\17\4\11\1\20"+
    "\1\11\1\21\1\22\1\11\1\23\1\24\1\25\1\11"+
    "\1\26\2\11\1\27\3\11\1\30\1\21\1\31\1\32"+
    "\1\11\1\33\1\34\1\35\1\36\1\37\1\7\1\40"+
    "\1\41\1\7\1\42\2\11\1\43\1\64\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\77\0\7\11\2\0"+
    "\1\11\1\0\6\11\1\0\16\11\2\0\3\11\11\0"+
    "\2\11\14\0\7\11\1\0\1\65\1\11\1\0\6\11"+
    "\1\0\16\11\2\0\3\11\1\0\1\66\7\0\2\11"+
    "\16\0\1\67\2\13\1\0\1\13\2\0\1\13\1\70"+
    "\3\0\1\71\1\0\1\72\6\0\1\72\46\0\1\73"+
    "\2\74\1\0\1\74\2\0\1\74\1\70\1\75\1\76"+
    "\1\77\1\71\1\0\1\72\6\0\1\72\26\0\1\76"+
    "\15\0\1\11\1\0\1\11\2\0\1\11\5\0\6\11"+
    "\1\0\16\11\2\0\3\11\11\0\2\11\17\0\2\100"+
    "\1\0\1\100\2\0\1\100\1\101\61\0\7\11\2\0"+
    "\1\11\1\0\6\11\1\0\1\102\5\11\1\102\6\11"+
    "\1\103\2\0\3\11\11\0\2\11\14\0\7\11\2\0"+
    "\1\11\1\0\6\11\1\0\1\11\1\104\14\11\2\0"+
    "\3\11\11\0\2\11\14\0\7\11\2\0\1\11\1\0"+
    "\6\11\1\0\5\11\1\105\10\11\2\0\3\11\11\0"+
    "\2\11\14\0\7\11\2\0\1\11\1\0\6\11\1\0"+
    "\4\11\1\106\11\11\2\0\3\11\11\0\2\11\14\0"+
    "\7\11\2\0\1\11\1\0\6\11\1\0\5\11\1\107"+
    "\10\11\2\0\3\11\11\0\2\11\14\0\7\11\2\0"+
    "\1\11\1\0\2\11\1\110\3\11\1\0\7\11\1\111"+
    "\6\11\2\0\3\11\11\0\2\11\14\0\7\11\2\0"+
    "\1\11\1\0\6\11\1\0\7\11\1\112\6\11\2\0"+
    "\3\11\11\0\2\11\14\0\7\11\2\0\1\11\1\0"+
    "\2\11\1\113\3\11\1\0\16\11\2\0\3\11\11\0"+
    "\2\11\55\0\1\114\32\0\7\11\2\0\1\11\1\0"+
    "\4\11\1\115\1\11\1\0\16\11\2\0\3\11\11\0"+
    "\2\11\14\0\7\11\2\0\1\11\1\0\6\11\1\0"+
    "\1\11\1\116\14\11\2\0\3\11\11\0\2\11\61\0"+
    "\1\21\74\0\1\21\74\0\1\21\1\0\1\21\71\0"+
    "\1\21\101\0\1\117\100\0\1\120\21\0\1\121\2\0"+
    "\1\54\6\0\1\54\1\122\1\0\2\54\1\0\2\54"+
    "\7\0\1\54\1\0\1\54\10\0\2\54\1\0\1\123"+
    "\1\124\1\0\1\54\73\0\1\125\15\0\1\126\1\0"+
    "\1\126\1\0\1\121\1\126\1\0\1\54\6\0\1\54"+
    "\1\122\1\0\2\54\1\0\2\54\7\0\1\54\1\0"+
    "\1\54\10\0\2\54\1\127\1\123\1\124\1\0\1\54"+
    "\66\0\1\130\20\0\1\21\74\0\2\13\1\0\1\13"+
    "\2\0\1\13\65\0\2\100\1\0\1\100\2\0\1\100"+
    "\6\0\1\72\6\0\1\72\63\0\1\131\57\0\2\132"+
    "\1\0\1\132\2\0\1\132\7\0\1\133\55\0\2\74"+
    "\1\0\1\74\2\0\1\74\64\0\1\73\2\74\1\0"+
    "\1\74\2\0\1\74\1\70\3\0\1\71\1\0\1\72"+
    "\6\0\1\72\52\0\1\134\2\0\1\134\65\0\4\135"+
    "\2\0\1\135\1\0\1\135\4\0\1\135\6\0\3\135"+
    "\2\0\1\135\5\0\1\135\35\0\1\136\1\0\1\136"+
    "\2\0\1\136\64\0\1\137\2\100\1\0\1\100\2\0"+
    "\1\100\4\0\1\71\1\0\1\72\6\0\1\72\56\0"+
    "\1\140\61\0\7\11\2\0\1\11\1\0\6\11\1\0"+
    "\11\11\1\141\4\11\2\0\3\11\11\0\2\11\14\0"+
    "\7\11\2\0\1\11\1\0\6\11\1\0\2\11\1\142"+
    "\13\11\2\0\3\11\11\0\2\11\14\0\7\11\2\0"+
    "\1\11\1\0\6\11\1\0\3\11\1\102\12\11\2\0"+
    "\3\11\11\0\2\11\14\0\7\11\2\0\1\11\1\0"+
    "\6\11\1\0\1\11\1\143\14\11\2\0\3\11\11\0"+
    "\2\11\14\0\7\11\2\0\1\11\1\0\6\11\1\0"+
    "\15\11\1\144\2\0\3\11\11\0\2\11\14\0\7\11"+
    "\2\0\1\11\1\0\6\11\1\0\4\11\1\102\11\11"+
    "\2\0\3\11\11\0\2\11\14\0\7\11\2\0\1\11"+
    "\1\0\6\11\1\0\2\11\1\145\13\11\2\0\3\11"+
    "\11\0\2\11\14\0\7\11\2\0\1\11\1\0\6\11"+
    "\1\0\12\11\1\146\3\11\2\0\3\11\11\0\2\11"+
    "\14\0\7\11\2\0\1\11\1\0\6\11\1\0\16\11"+
    "\2\0\1\144\2\11\11\0\2\11\11\0\2\114\1\0"+
    "\71\114\3\0\7\11\2\0\1\11\1\0\6\11\1\0"+
    "\16\11\2\0\1\11\1\144\1\11\11\0\2\11\14\0"+
    "\7\11\2\0\1\11\1\0\2\11\1\144\3\11\1\0"+
    "\16\11\2\0\3\11\11\0\2\11\71\0\1\147\100\0"+
    "\1\150\21\0\1\121\2\0\1\54\6\0\1\54\2\0"+
    "\2\54\1\0\2\54\7\0\1\54\1\0\1\54\10\0"+
    "\2\54\4\0\1\54\14\0\4\151\2\0\1\151\1\0"+
    "\1\151\4\0\1\151\6\0\3\151\2\0\1\151\5\0"+
    "\1\151\34\0\4\152\2\0\1\152\1\0\1\152\4\0"+
    "\1\152\6\0\3\152\2\0\1\152\5\0\1\152\113\0"+
    "\1\153\15\0\1\154\1\0\1\154\2\0\1\154\65\0"+
    "\4\155\2\0\1\155\1\0\1\155\4\0\1\155\6\0"+
    "\3\155\2\0\1\155\5\0\1\155\106\0\1\156\20\0"+
    "\1\133\2\132\1\0\1\132\2\0\1\132\65\0\2\132"+
    "\1\0\1\132\2\0\1\132\64\0\1\75\3\0\1\134"+
    "\2\0\1\134\64\0\1\76\4\135\2\0\1\135\1\0"+
    "\1\135\4\0\1\135\6\0\3\135\2\0\1\135\5\0"+
    "\1\135\33\0\1\77\1\0\1\136\1\0\1\136\2\0"+
    "\1\136\65\0\2\100\1\0\1\100\2\0\1\100\62\0"+
    "\7\11\2\0\1\11\1\0\2\11\1\157\3\11\1\0"+
    "\16\11\2\0\3\11\11\0\2\11\14\0\7\11\2\0"+
    "\1\11\1\0\6\11\1\0\2\11\1\102\13\11\2\0"+
    "\3\11\11\0\2\11\14\0\7\11\2\0\1\11\1\0"+
    "\6\11\1\0\5\11\1\102\10\11\2\0\3\11\11\0"+
    "\2\11\14\0\7\11\2\0\1\11\1\0\6\11\1\0"+
    "\10\11\1\143\5\11\2\0\3\11\11\0\2\11\14\0"+
    "\7\11\2\0\1\11\1\0\6\11\1\0\13\11\1\160"+
    "\2\11\2\0\3\11\11\0\2\11\13\0\1\161\73\0"+
    "\1\162\77\0\4\163\2\0\1\163\1\0\1\163\4\0"+
    "\1\163\6\0\3\163\2\0\1\163\5\0\1\163\34\0"+
    "\4\164\2\0\1\164\1\0\1\164\4\0\1\164\6\0"+
    "\3\164\2\0\1\164\5\0\1\164\35\0\1\165\1\0"+
    "\1\165\2\0\1\165\65\0\4\165\2\0\1\165\1\0"+
    "\1\165\4\0\1\165\6\0\3\165\2\0\1\165\5\0"+
    "\1\165\31\0\7\11\2\0\1\11\1\0\6\11\1\0"+
    "\4\11\1\105\11\11\2\0\3\11\11\0\2\11\14\0"+
    "\7\11\2\0\1\11\1\0\6\11\1\0\7\11\1\166"+
    "\6\11\2\0\3\11\11\0\2\11\17\0\4\167\2\0"+
    "\1\167\1\0\1\167\4\0\1\167\6\0\3\167\2\0"+
    "\1\167\5\0\1\167\34\0\4\170\2\0\1\170\1\0"+
    "\1\170\4\0\1\170\6\0\3\170\2\0\1\170\5\0"+
    "\1\170\31\0\7\11\2\0\1\11\1\0\6\11\1\0"+
    "\14\11\1\143\1\11\2\0\3\11\11\0\2\11\17\0"+
    "\4\54\2\0\1\54\1\0\1\54\4\0\1\54\6\0"+
    "\3\54\2\0\1\54\5\0\1\54\34\0\4\122\2\0"+
    "\1\122\1\0\1\122\4\0\1\122\6\0\3\122\2\0"+
    "\1\122\5\0\1\122\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5460];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\2\11\4\1\1\11\3\1\1\11\17\1\1\11"+
    "\1\1\2\11\1\1\7\11\1\1\2\11\2\1\1\11"+
    "\1\1\1\11\3\0\2\1\6\0\1\1\1\0\15\1"+
    "\5\0\1\11\4\0\1\11\1\1\1\0\3\1\1\0"+
    "\1\11\6\1\4\0\1\11\2\0\1\11\2\1\2\11"+
    "\2\0\1\11\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _CueLexer() {
    this((java.io.Reader)null);
  }

  private final IntStack stateStack = new IntStack(1_000);

  private void pushState(int state) {
      int currentState = yystate();
      assert currentState != YYINITIAL || stateStack.empty() : "Can't push initial state into the not empty stack";
      stateStack.push(currentState);
      yybegin(state);
  }

  private void popState() {
    assert !stateStack.empty() : "States stack is empty";
    yybegin(stateStack.pop());
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _CueLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 34: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 35: break;
          case 3: 
            { return IDENTIFIER;
            } 
            // fall through
          case 36: break;
          case 4: 
            { return INT_LIT;
            } 
            // fall through
          case 37: break;
          case 5: 
            { return COMMA;
            } 
            // fall through
          case 38: break;
          case 6: 
            { return OPERATOR;
            } 
            // fall through
          case 39: break;
          case 7: 
            { return EQ;
            } 
            // fall through
          case 40: break;
          case 8: 
            { return QMARK;
            } 
            // fall through
          case 41: break;
          case 9: 
            { pushState(BYTE_LITERAL); return SINGLE_QUOTE;
            } 
            // fall through
          case 42: break;
          case 10: 
            { return LEFT_PAREN;
            } 
            // fall through
          case 43: break;
          case 11: 
            { return RIGHT_PAREN;
            } 
            // fall through
          case 44: break;
          case 12: 
            { pushState(STRING_LITERAL); return DOUBLE_QUOTE;
            } 
            // fall through
          case 45: break;
          case 13: 
            { return LEFT_CURLY;
            } 
            // fall through
          case 46: break;
          case 14: 
            { return RIGHT_CURLY;
            } 
            // fall through
          case 47: break;
          case 15: 
            { return COLON;
            } 
            // fall through
          case 48: break;
          case 16: 
            { return LEFT_BRACKET;
            } 
            // fall through
          case 49: break;
          case 17: 
            { return RIGHT_BRACKET;
            } 
            // fall through
          case 50: break;
          case 18: 
            { return AT;
            } 
            // fall through
          case 51: break;
          case 19: 
            { return UNICODE_VALUE;
            } 
            // fall through
          case 52: break;
          case 20: 
            { popState(); return DOUBLE_QUOTE_END;
            } 
            // fall through
          case 53: break;
          case 21: 
            { return NEWLINE;
            } 
            // fall through
          case 54: break;
          case 22: 
            { popState(); return SINGLE_QUOTE_END;
            } 
            // fall through
          case 55: break;
          case 23: 
            { return INTERPOLATION_END;
            } 
            // fall through
          case 56: break;
          case 24: 
            { return FLOAT_LIT;
            } 
            // fall through
          case 57: break;
          case 25: 
            { return KEYWORD;
            } 
            // fall through
          case 58: break;
          case 26: 
            { return COMMENT;
            } 
            // fall through
          case 59: break;
          case 27: 
            { pushState(EXPRESSION); return INTERPOLATION_START;
            } 
            // fall through
          case 60: break;
          case 28: 
            { return ELLIPSIS_TOKEN;
            } 
            // fall through
          case 61: break;
          case 29: 
            { popState(); return MULTILINE_STRING_END;
            } 
            // fall through
          case 62: break;
          case 30: 
            { popState(); return MULTILINE_BYTES_END;
            } 
            // fall through
          case 63: break;
          case 31: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { pushState(BYTES_MULTILINE); return MULTILINE_BYTES_START;
            } 
            // fall through
          case 64: break;
          case 32: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 3);
            { pushState(STRING_MULTILINE); return MULTILINE_STRING_START;
            } 
            // fall through
          case 65: break;
          case 33: 
            { return BYTE_VALUE;
            } 
            // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
